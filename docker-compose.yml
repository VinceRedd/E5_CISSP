services:
  # ---------- CALDERA ----------
  # Plateforme d’émulation d’attaques (C2).
  # UI : http://localhost:8888
  caldera:
    image: ghcr.io/mitre/caldera:latest
    container_name: caldera
    restart: unless-stopped
    ports: ["8888:8888"]
    volumes:
      - caldera_data:/caldera/data
    environment:
      - CALDERA_INSECURE=true

  # ---------- MongoDB (pour Infection Monkey) ----------
  # Je laisse Mongo en "host networking" pour le rendre dispo en 127.0.0.1:27017.
  mongo:
    image: mongo:4.4
    platform: linux/amd64
    container_name: mongo
    hostname: mongo
    restart: unless-stopped
    network_mode: host
    command: ["mongod", "--bind_ip_all", "--wiredTigerCacheSizeGB", "0.25"]
    volumes:
      - monkey-tutorial-db:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 12

  # ---------- Infection Monkey (Monkey Island) ----------
  # UI : https://localhost:5000 (cert auto-signé)
  # Il pointe sur Mongo en local (127.0.0.1:27017).
  monkey-island:
    image: infectionmonkey/monkey-island:e7c59c79d
    container_name: monkey-island
    hostname: monkey-island
    restart: unless-stopped
    network_mode: host
    environment:
      - MONKEY_MONGO_URL=mongodb://127.0.0.1:27017/monkey_island_test
      - MONGO_URL=mongodb://127.0.0.1:27017/monkey_island_test
    depends_on:
      mongo:
        condition: service_healthy

  # ---------- Machine cible "hello" (SSH) ----------
  # Petite VM/containeur cible pour les tests d’attaque.
  hello:
    image: infectionmonkey/ssh1
    container_name: hello
    hostname: hello
    command: '/usr/sbin/sshd -D && sh -c "trap : TERM INT; tail -f /dev/null & wait"'
    # Décommente si besoin d’un accès SSH depuis l’hôte :
    # ports:
    #   - "2222:22"

  # ---------- NETDATA ----------
  # Monitoring en temps réel : http://localhost:19999
  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    hostname: netdata
    cap_add: ["SYS_PTRACE"]
    pid: "host"
    restart: unless-stopped
    ports: ["19999:19999"]
    volumes:
      - netdata_lib:/var/lib/netdata
      - netdata_etc:/etc/netdata
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/passwd:/host/etc/passwd:ro

  # ---------- WAZUH (désactivé localement) ----------
  # Problème CPU x86-64-v2 sous VirtualBox Windows → je ne lance pas l’indexer/manager/dashboard ici.
  # À la place, j’utilise l’OVA Wazuh (ou Wazuh sur l’hôte Windows).
  #
  # Optionnel : si je veux tester un agent Wazuh *dans* cette Kali
  # qui envoie vers l’OVA, je peux ajouter un conteneur agent comme ci-dessous
  # (laisse commenté si tu préfères installer l’agent “classique” sur l’OS).
  #
  # wazuh-agent:
  #   image: wazuh/wazuh-agent:latest
  #   container_name: wazuh-agent
  #   restart: unless-stopped
  #   network_mode: host
  #   environment:
  #     - WAZUH_MANAGER=<IP_WAZUH_OVA>   # ex: 192.168.1.50
  #     - WAZUH_AGENT_NAME=kali-agent
  #   # Tu peux aussi installer l’agent sur la VM Kali directement (hors Docker) :
  #   # via “Deploy new agent” depuis le dashboard Wazuh.

volumes:
  caldera_data:
  monkey-tutorial-db:
  netdata_lib:
  netdata_etc:
