# ============================================================
# LAB CYBER - Docker Compose (VM Kali sous VirtualBox / Windows 10)
# ------------------------------------------------------------
# Ce fichier regroupe les différents outils du lab :
#  - Caldera (C2 / émulation d’attaques)
#  - Infection Monkey (pentest automatisé)
#  - Netdata (monitoring)
#  - Wazuh (SIEM) — externalisé à cause d’une contrainte matérielle
#  - Dockurr/Windows (VM Windows dans Docker) — non fonctionnel ici
#
# ⚠️ Contexte important :
# 1. Cette VM Kali tourne dans VirtualBox sur un hôte Windows.
# 2. VirtualBox ne transmet pas les extensions CPU AVX / VT-x aux conteneurs Docker.
# 3. Conséquences :
#    - Les conteneurs qui exigent x86-64-v2 (Wazuh, MongoDB 6+) refusent de démarrer.
#    - Les conteneurs basés sur KVM (/dev/kvm) comme dockurr/windows ne peuvent pas s’exécuter.
#
# Ces limitations sont matérielles, pas logicielles : elles viennent de VirtualBox.
# Le compose est donc correct, mais certaines images nécessitent un environnement
# de virtualisation plus bas-niveau (Ubuntu natif, WSL2 ou Docker Desktop sur l’hôte).
# ============================================================

services:
  # ---------- CALDERA ----------
  # Plateforme d’émulation d’attaques (C2 Framework MITRE).
  # Interface Web : http://localhost:8888
  caldera:
    image: ghcr.io/mitre/caldera:latest
    container_name: caldera
    restart: unless-stopped
    ports: ["8888:8888"]
    volumes:
      - caldera_data:/caldera/data
    environment:
      - CALDERA_INSECURE=true

  # ---------- MongoDB ----------
  # Utilisé par Infection Monkey (base de données interne).
  # Mongo 5+ nécessite AVX → on reste sur Mongo 4.4 (compatible VirtualBox).
  # Mode réseau "host" pour exposer le port local 27017 à Monkey.
  mongo:
    image: mongo:4.4
    platform: linux/amd64
    container_name: mongo
    hostname: mongo
    restart: unless-stopped
    network_mode: host
    command: ["mongod", "--bind_ip_all", "--wiredTigerCacheSizeGB", "0.25"]
    volumes:
      - monkey-tutorial-db:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 12

  # ---------- Infection Monkey (Monkey Island) ----------
  # Serveur de gestion Infection Monkey (C2 local).
  # Interface Web : https://localhost:5000
  # Se connecte directement à MongoDB (127.0.0.1:27017)
  monkey-island:
    image: infectionmonkey/monkey-island:e7c59c79d
    container_name: monkey-island
    hostname: monkey-island
    restart: unless-stopped
    network_mode: host
    environment:
      - MONKEY_MONGO_URL=mongodb://127.0.0.1:27017/monkey_island_test
      - MONGO_URL=mongodb://127.0.0.1:27017/monkey_island_test
    depends_on:
      mongo:
        condition: service_healthy

  # ---------- Machine cible "Hello" ----------
  # Cible SSH simple pour tester les attaques Infection Monkey.
  hello:
    image: infectionmonkey/ssh1
    container_name: hello
    hostname: hello
    command: '/usr/sbin/sshd -D && sh -c "trap : TERM INT; tail -f /dev/null & wait"'
    # Décommente si tu veux un accès SSH direct depuis ton hôte :
    # ports:
    #   - "2222:22"

  # ---------- NETDATA ----------
  # Monitoring en temps réel (CPU, RAM, conteneurs, réseau…)
  # Interface : http://localhost:19999
  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    hostname: netdata
    cap_add: ["SYS_PTRACE"]
    pid: "host"
    restart: unless-stopped
    ports: ["19999:19999"]
    volumes:
      - netdata_lib:/var/lib/netdata
      - netdata_etc:/etc/netdata
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/passwd:/host/etc/passwd:ro

  # ---------- WAZUH (externalisé) ----------
  # Stack Wazuh (Indexer + Manager + Dashboard) désactivée ici.
  # Motif :
  # - L’image Wazuh repose sur OpenSearch (x86-64-v2 / AVX).
  # - VirtualBox bloque les instructions AVX/SSE4 requises → crash au démarrage.
  # Solution :
  # - Utilisation de l’OVA Wazuh officielle (import VirtualBox en bridged)
  #   ou bien installation sur l’hôte Windows avec Docker Desktop.
  # - Les conteneurs Kali peuvent ensuite envoyer leurs logs/agents vers l’IP
  #   de la VM Wazuh externe.
  #
  # Option : agent Docker local pour test (commenté ci-dessous)
  # wazuh-agent:
  #   image: wazuh/wazuh-agent:latest
  #   container_name: wazuh-agent
  #   restart: unless-stopped
  #   network_mode: host
  #   environment:
  #     - WAZUH_MANAGER=<IP_WAZUH_OVA>   # ex: 192.168.1.50
  #     - WAZUH_AGENT_NAME=kali-agent

  # ---------- Dockurr/Windows ----------
  # Ce conteneur émule un Windows Server complet dans Docker.
  # Il nécessite l’accès à /dev/kvm pour virtualiser avec QEMU + KVM.
  #
  # Sous VirtualBox, /dev/kvm n’existe pas (pas de nested virtualization),
  # donc le conteneur ne peut pas démarrer. Ce n’est pas une erreur du compose :
  # c’est une limitation technique de VirtualBox.
  #
  # ⚙️ Solution :
  # - Lancer ce conteneur depuis Ubuntu natif, WSL2 ou Docker Desktop.
  # - Dans VirtualBox, il démarrera uniquement en TCG (émulation logicielle),
  #   donc extrêmement lent et inutilisable.
  #
  # windows:
  #   image: dockurr/windows
  #   container_name: windows
  #   environment:
  #     VERSION: "2019"
  #   devices:
  #     - /dev/kvm
  #     - /dev/net/tun
  #   cap_add:
  #     - NET_ADMIN
  #   ports:
  #     - 8006:8006
  #     - 3389:3389/tcp
  #     - 3389:3389/udp
  #   volumes:
  #     - ./windows:/storage
  #   restart: always
  #   stop_grace_period: 2m

# ---------- VOLUMES ----------
volumes:
  caldera_data:
  monkey-tutorial-db:
  netdata_lib:
  netdata_etc:
